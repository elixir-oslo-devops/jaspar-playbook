---
# tasks file for jaspar
- name: Print host variable
  tags:
      - test_print
  ansible.builtin.debug:
      var: hostvars[inventory_hostname]

- name: Install EPEL repo
  tags:
    - jaspar
    - initialization
  become: true
  ansible.builtin.dnf:
    name: epel-release
    state: latest
  when: ansible_user == 'rocky'


- name: Install packages
  become: true
  tags:
    - jaspar
    - initialization
  ansible.builtin.package:
    state: present
    update_cache: true
    name:
      - git
      - httpd
      - certbot
      - python3-certbot-apache
      - wget
      - postfix

- name: Gather the package facts
  tags:
    - jaspar
    - initialization
  ansible.builtin.package_facts:
    manager: auto

- name: "Searching for a String"
  tags:
    - jaspar
    - initialization
    - miniconda
  lineinfile:
    path: '/home/{{ ansible_user }}/.bashrc'
    regexp: "/home/{{ ansible_user }}/miniconda/bin"
    line: 'PATH=$PATH:/home/{{ ansible_user }}/miniconda/bin'
    state: present
  check_mode: yes
  register: presence

- name: "Searching for a String"
  tags:
    - jaspar
    - initialization
    - miniconda
  ansible.builtin.debug:
    msg: '{{ presence }}'

- name: Install miniconda
  tags:
    - jaspar
    - initialization
    - miniconda
  block:
    - name: downloading installation script
      ansible.builtin.get_url:
        url: '{{ miniconda_url }}'
        dest: /tmp/miniconda.sh
        checksum: 'sha256:{{ miniconda_hash }}'
        mode: u=rwx,g=rwx,o=r
    - name: Run miniconda script
      ansible.builtin.command:
        cmd: '/tmp/miniconda.sh -b -p /home/{{ ansible_user }}/miniconda'
    - name: Activate miniconda
      ansible.builtin.lineinfile:
        path:  '/home/{{ ansible_user }}/.bashrc'
        line: 'PATH=$PATH:/home/{{ ansible_user }}/miniconda/bin'
        create: yes
  when: 'presence.changed == true'


- name: Configure conda
  tags:
    - jaspar
    - initialization
    - miniconda
  block:
    - name: Add default channel
      ansible.builtin.command:
        cmd: 'conda config --add channels defaults'
    - name: Add bioconda channel
      ansible.builtin.command:
        cmd: 'conda config --add channels bioconda'
    - name: Add conda-forge channel
      ansible.builtin.command:
        cmd: 'conda config --add channels conda-forge'
    - name: Add conda-forge channel
      ansible.builtin.command:
        cmd: 'conda config --set auto_activate_base false'


- name: Make base directory
  become: true
  tags:
    - jaspar
    - initialization
  ansible.builtin.file:
    state: directory
    path: '{{ jaspar_base_dir }}'
    owner: '{{ ansible_user }}'
    mode: '0755'
    recurse: false

- name: Make data directory
  become: true
  tags:
    - jaspar
    - initialization
  ansible.builtin.file:
    state: directory
    path: '{{ jaspar_data_dir }}'
    owner: '{{ ansible_user }}'
    mode: '0755'
    recurse: false

- name: Certbot account register
  become: true
  tags:
    - jaspar
    - initialization
  ansible.builtin.command:
    cmd: 'certbot -n register --agree-tos --email {{ admin_email }}'
    creates: '/etc/letsencrypt/accounts/acme-v02.api.letsencrypt.org/directory/*/regr.json'

- name: Start Certbot renew timer
  become: true
  tags:
    - jaspar
    - initialization
  ansible.builtin.service:
    name: certbot-renew.timer
    state: started

- name: Clone main repo
  tags:
    - jaspar
    - initialization
  ansible.builtin.git:
    repo: '{{ jaspar_app_git_repo }}'
    dest: '{{ jaspar_base_dir }}/jaspar2020'
    version: '{{ jaspar_app_main_git_version }}'
    update: false
    force: false

- name: Clone branding repo
  tags:
    - jaspar
    - initialization
  ansible.builtin.git:
    repo: '{{ jaspar_branding_git_repo }}'
    dest: '{{ jaspar_base_dir }}/jaspar-branding'
    version: master

# Loops through list of files/dirs to label, using regex to create regex.
# Takes a minute, probably due to checking the state of every item.
# Creates SSH connection for every iteration?
- name: Set SELinux file context for httpd
  tags:
    - jaspar
    - initialization
  become: true
  community.general.sefcontext:
    target: '{{ jaspar_base_dir }}/{{ item | regex_replace("/$", "(/.*)?") }}'
    setype: httpd_sys_content_t
    state: present
  loop: '{{ sef_httpd_content }}'
  register: sefcontext
#  notify: Apply SELinux file contexts

# builtin.get_url not appear to support recursive download
- name: Fetch JASPAR data
  tags:
    - jaspar
    - initialization
  ansible.builtin.command:
    cmd: 'wget -r -nv -nc -nd -np -l 1 --no-check-certificate -e robots=off -P {{ jaspar_data_dir }} {{ jaspar_data_url }} '
  register: wget_result
  changed_when: '"Downloaded:" in wget_result.stderr'

- name: SMTP settings file
  become: true
  tags:
    - jaspar
    - initialization
  ansible.builtin.template:
    src: templates/smtp_settings.txt.j2
    dest: '{{ jaspar_base_dir }}/jaspar2020/smtp_settings.txt'
    owner: '{{ jaspar_user }}'
    group: apache
    mode: '0640'

- name: Update settings
  tags:
    - jaspar
    - initialization
  ansible.builtin.replace:
    path: '{{ jaspar_base_dir }}/jaspar2020/jaspar/settings.py'
    regexp: '^{{ item.setting }} = .+'
    replace: '{{ item.setting }} = {{ item.value }}'
  loop:
    - { setting: 'SEND_TO_EMAIL', value: "['{{ send_to_email }}']" }
    - { setting: 'TIME_ZONE', value: "'CET'" }

#==============================================
# initial privileged deploy scripts
#==============================================

#==============================================
# 00-root-packages.sh
#==============================================

- name: Install prerequisite
  tags:
    - 00-root-packages
  become: true
  ansible.builtin.package:
    name:
      - acl
      - cpio
      - gcc
      - gcc-c++
      - git
      - gsl-devel
      - gzip
      - libcurl-devel
      - libxml2-devel
      - make
      - openssl-devel
      - patch
      - perl-interpreter
      - python3-devel
      - python3-pip
      - python3-mod_wsgi
      - sqlite
      - wget
      - which
    state: present
    update_cache: true
  when: ansible_user == 'rocky'




- name: 00-user-deploy-tools
  tags:
    - 00-user-deploy-tools
  include_tasks:
      file: 00-user-deploy-tools.yml
      apply:
        tags:
          - 00-user-deploy-tools
  when: unprivileged|bool == true




- name: 00-user-site
  tags:
    - 00-user-site
  include_tasks:
      file: 00-user-site.yml
      apply:
        tags:
          - 00-user-site
  when: unprivileged|bool == true


#
## Installs system packages. Can easily be ansified.
#- name: Run initial privileged deploy scripts
#  tags:
#    - jaspar
#    - deploy-init
#  ansible.builtin.command:
#    cmd: '{{ jaspar_app_dir }}/deploy.sh -i -- -s {{ jaspar_hostname }} -d {{ jaspar_data_dir }} -S'
#    creates: '{{ jaspar_app_dir }}/deploy-logs/00-root-packages.sh'
#



#==============================================
# unprivileged deploy scripts
#==============================================


- name: 01-user-dependencies
  tags:
    - 01-user-dependencies
  include_tasks:
      file: 01-user-dependencies.yml
      apply:
        tags:
          - 01-user-dependencies
  when: unprivileged|bool == true


- name: 02-user-blast
  tags:
    - 02-user-blast
  include_tasks:
      file: 02-user-blast.yml
      apply:
        tags:
          - 02-user-blast
  when: unprivileged|bool == true


- name: 02-user-branding
  tags:
    - 02-user-branding
  include_tasks:
      file: 02-user-branding.yml
      apply:
        tags:
          - 02-user-branding
  when: unprivileged|bool == true


- name: 02-user-directories
  tags:
    - 02-user-directories
  include_tasks:
      file: 02-user-directories.yml
      apply:
        tags:
          - 02-user-directories
  when: unprivileged|bool == true


- name: 02-user-hmmer
  tags:
    - 02-user-hmmer
  include_tasks:
      file: 02-user-hmmer.yml
      apply:
        tags:
          - 02-user-hmmer
  when: unprivileged|bool == true


- name: 02-user-profile-inference
  tags:
    - 02-user-profile-inference
  include_tasks:
      file: 02-user-profile-inference.yml
      apply:
        tags:
          - 02-user-profile-inference
  when: unprivileged|bool == true


- name: 03-user-django
  tags:
    - 03-user-django
  include_tasks:
      file: 03-user-django.yml
      apply:
        tags:
          - 03-user-django
  when: unprivileged|bool == true


- name: 03-user-static-data
  tags:
    - 03-user-static-data
  include_tasks:
      file: 03-user-static-data.yml
      apply:
        tags:
          - 03-user-static-data
  when: unprivileged|bool == true


- name: 04-user-django-patches
  tags:
    - 04-user-django-patches
  include_tasks:
      file: 04-user-django-patches.yml
      apply:
        tags:
          - 04-user-django-patches
  when: unprivileged|bool == true


- name: 04-user-metadata
  tags:
    - 04-user-metadata
  include_tasks:
      file: 04-user-metadata.yml
      apply:
        tags:
          - 04-user-metadata
  when: unprivileged|bool == true


- name: 05-user-archetypes
  tags:
    - 05-user-archetypes
  include_tasks:
      file: 05-user-archetypes.yml
      apply:
        tags:
          - 05-user-archetypes
  when: unprivileged|bool == true


- name: 05-user-changelog
  tags:
    - 05-user-changelog
  include_tasks:
      file: 05-user-changelog.yml
      apply:
        tags:
          - 05-user-changelog
  when: unprivileged|bool == true


- name: 05-user-database-site-data
  tags:
    - 05-user-database-site-data
  include_tasks:
      file: 05-user-database-site-data.yml
      apply:
        tags:
          - 05-user-database-site-data
  when: unprivileged|bool == true

- name: 06-user-clustering
  tags:
    - 06-user-clustering
  include_tasks:
      file: 06-user-clustering.yml
      apply:
        tags:
          - 06-user-clustering
  when: unprivileged|bool == true


- name: 06-user-database-downloads
  tags:
    - 06-user-database-downloads
  include_tasks:
      file: 06-user-database-downloads.yml
      apply:
        tags:
          - 06-user-database-downloads
  when: unprivileged|bool == true


- name: 06-user-sqlite-apache
  tags:
    - 06-user-sqlite-apache
  include_tasks:
      file: 06-user-sqlite-apache.yml
      apply:
        tags:
          - 06-user-sqlite-apache
  when: unprivileged|bool == true


- name: 07-user-data-features
  tags:
    - 07-user-data-features
  include_tasks:
      file: 07-user-data-features.yml
      apply:
        tags:
          - 07-user-data-features
  when: unprivileged|bool == true


- name: 07-user-data
  tags:
    - 07-user-data
  include_tasks:
      file: 07-user-data.yml
      apply:
        tags:
          - 07-user-data
  when: unprivileged|bool == true

- name: 07-user-downloads
  tags:
    - 07-user-downloads
  include_tasks:
      file: 07-user-downloads.yml
      apply:
        tags:
          - 07-user-downloads
  when: unprivileged|bool == true



#==============================================
# final privileged deploy scripts
#==============================================


- name: 10-root-selinux-captcha
  tags:
    - 10-root-selinux-captcha
  include_tasks:
      file: 10-root-selinux-captcha.yml
      apply:
        tags:
          - 10-root-selinux-captcha
  when: final_privileged|bool == true

- name: 10-root-selinux-lib
  tags:
    - 10-root-selinux-lib
  include_tasks:
    file: 10-root-selinux-lib.yml
    apply:
      tags:
        - 10-root-selinux-lib
  when: final_privileged|bool == true


- name: 10-root-selinux-sqlite
  tags:
    - 10-root-selinux-sqlite
  include_tasks:
    file: 10-root-selinux-sqlite.yml
    apply:
      tags:
        - 10-root-selinux-sqlite
  when: final_privileged|bool == true

- name: 10-root-selinux
  tags:
    - 10-root-selinux
  include_tasks:
    file: 10-root-selinux.yml
    apply:
      tags:
        - 10-root-selinux
  when: final_privileged|bool == true

- name: 11-root-httpd
  tags:
    - 11-root-httpd
  include_tasks:
     file: 11-root-httpd.yml
     apply:
       tags:
         - 11-root-httpd
  when: final_privileged|bool == true



- name: Set SELinux file context for lib
  tags:
    - finalization
  become: true
  community.general.sefcontext:
    target: '{{ item | regex_replace("/$", "(/.*)?") }}'
    setype: lib_t
    state: present
  loop: '{{ sef_lib_t_content }}'
  register: sefcontext
#  notify: Apply SELinux file contexts

- name: Set SELinux file context for bin
  tags:
    - finalization
  become: true
  community.general.sefcontext:
    target: '{{ item | regex_replace("/$", "(/.*)?") }}'
    setype: bin_t
    state: present
  loop: '{{ sef_bin_t_content }}'
  register: sefcontext
#  notify: Apply SELinux file contexts

- name: Set SELinux file context for httpd_sys_rw_content_t
  tags:
    - finalization
  become: true
  community.general.sefcontext:
    target: '{{ item | regex_replace("/$", "(/.*)?") }}'
    setype: httpd_sys_rw_content_t
    state: present
  loop: '{{ sef_httpd_sys_rw_content_t_content }}'
  register: sefcontext
#  notify: Apply SELinux file contexts

- name: Restart stuff
  tags:
    - finalization
  ansible.builtin.debug:
    msg: 'Restart stuff'
  changed_when: true
  notify:
    - Restore SELinux file contexts
    - Restart httpd
    - Run tests


#- name: Restore SELinux file contexts
#  tags:
#    - selinux
#  become: true
#  ansible.builtin.command: 'restorecon -Rv {{ jaspar_base_dir }}'


#- name: Restart httpd
#  tags:
#    - apache
#  become: true
#  ansible.builtin.systemd:
#    name: httpd.service
#    state: restarted
