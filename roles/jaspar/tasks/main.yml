---

- name: Install packages
  become: true
  ansible.builtin.package:
    state: present
    name:
      - git
      - httpd
      - certbot
      - python3-certbot-apache
      - wget
      - conda

- name: Make base directory
  become: true
  ansible.builtin.file:
    state: directory
    path: '{{ jaspar_base_dir }}'
    owner: '{{ ansible_user }}'
    mode: 0755
    recurse: false

- name: Certbot account register
  become: true
  ansible.builtin.command:
    cmd: 'certbot -n register --agree-tos --email {{ admin_email }}'
    creates: '/etc/letsencrypt/accounts/acme-v02.api.letsencrypt.org/directory/*/regr.json'

- name: Clone main repo
  ansible.builtin.git:
    repo: '{{ jaspar_app_git_repo }}'
    dest: '{{ jaspar_base_dir }}/jaspar2020'
    version: '{{ jaspar_app_git_version }}'
    update: false
    force: false

- name: Clone branding repo
  ansible.builtin.git:
    repo: '{{ jaspar_branding_git_repo }}'
    dest: '{{ jaspar_base_dir }}/jaspar-branding'
    version: master

# Loops through list of files/dirs to label, using regex to create regex.
# Takes a minute, probably due to checking the state of every item.
# Creates SSH connection for every iteration?
- name: Set SELinux file context for httpd
  tags: selinux
  become: true
  community.general.sefcontext:
    target: '{{ jaspar_base_dir }}/{{ item | regex_replace("/$", "(/.*)?") }}'
    setype: httpd_sys_content_t
    state: present
  loop: '{{ sef_httpd_content }}'
  register: sefcontext
  notify: Apply SELinux file contexts

# builtin.get_url not appear to support recursive download
- name: Fetch JASPAR data
  tags: fetch-data
  ansible.builtin.command:
    cmd: 'wget -r -nv -nc -nd -np -l 1 --no-check-certificate -e robots=off -P {{ jaspar_data_dir }} {{ jaspar_data_url }} '
  register: wget_result
  changed_when: '"Downloaded:" in wget_result.stderr'

- name: SMTP settings file
  become: true
  ansible.builtin.template:
    src: templates/smtp_settings.txt.j2
    dest: '{{ jaspar_base_dir }}/jaspar2020/smtp_settings.txt'
    owner: '{{ jaspar_user }}'
    group: apache
    mode: 0640

- name: Update settings
  tags: settings
  ansible.builtin.replace:
    path: '{{ jaspar_base_dir }}/jaspar2020/jaspar/settings.py'
    regexp: '^{{ item.setting }} = .+'
    replace: '{{ item.setting }} = {{ item.value }}'
  loop:
    - { setting: 'SEND_TO_EMAIL', value: "'{{ admin_email }}'" }
    - { setting: 'TIME_ZONE', value: "'CET'" }


# Installs system packages. Can easily be ansified.
- name: Run initial privileged deploy scripts
  tags:
    - deploy
    - deploy-init
  ansible.builtin.command:
    cmd: '{{ jaspar_app_dir }}/deploy.sh -i -- -s {{ jaspar_hostname }} -d {{ jaspar_data_dir }} -S'
    creates: '{{ jaspar_app_dir }}/deploy-logs/00-root-packages.sh'

# Time: ca 5 min
- name: Run unprivileged deploy scripts
  tags:
    - deploy
    - deploy-user
  ansible.builtin.command:
    cmd: '{{ jaspar_app_dir }}/deploy.sh -u -- -s {{ jaspar_hostname }} -d {{ jaspar_data_dir }} -S'
    creates: '{{ jaspar_app_dir }}/deploy-logs/07-user-downloads.sh'

# Time: ca 2 min
- name: Run final privileged deploy scripts
  tags:
    - deploy
    - deploy-final
  ansible.builtin.command:
    cmd: '{{ jaspar_app_dir }}/deploy.sh -f -- -s {{ jaspar_hostname }} -d {{ jaspar_data_dir }} -S'
    creates: '{{ jaspar_app_dir }}/deploy-logs/11-root-httpd.sh'
  notify:
    - Restore SELinux file contexts
    - Restart httpd
    - Run tests
