---
# tasks file for 06-user-database-downloads

##TODO: Ansiblelized script ?
#- name: Generate database archives.
#  become: false
#  ansible.builtin.command:
#    cmd: '{{ jaspar_app_dir }}/deploy/06-user-database-downloads.sh'
#    chdir: '{{ jaspar_app_dir }}'



- name: Create database download directory
  ansible.builtin.file:
    path: '{{ jaspar_app_dir }}/download/database'
    state: directory
    mode: '0755'


- name: Find all databases
  ansible.builtin.find:
    paths: '{{ jaspar_app_dir }}'
    file_type: file
    patterns: 'JASPAR*sqlite3'
  register: jaspar_sqlite


- name: Throw error if no databases are found
  ansible.builtin.fail:
    msg: "No databases found!"
  when: jaspar_sqlite.files | length == 0

- name: Generate a dump file from the database
  ansible.builtin.command: "{{ jaspar_app_dir }}/deploy/tools/dump_database {{ item.path }} mktemp --suffix=.sql"
  loop: '{{ jaspar_sqlite.files }}'

- name: Compress the dump file
  community.general.archive:
    path: "{{ item.path }}"
    dest: "{{ jaspar_app_dir }}/download/database/{{ item.path | basename | regex_replace('sqlite3$', 'sql.gz') }}"
    format: gz
  loop: '{{ jaspar_sqlite.files }}'
#
#- name: Unarchived the compressed file
#  ansible.builtin.command: "gunzip --keep --force {{ jaspar_app_dir }}/download/database/{{ item.path | basename | regex_replace('sqlite3$', 'sql.gz') }}"
#  loop: '{{ jaspar_sqlite.files }}'
#
#- name: Ensure SQLITE3 format
#  ansible.builtin.command: "sqlite3 {{ jaspar_app_dir }}/download/database/{{ item.path | basename | regex_replace('sqlite3$', 'sqlite') }} < {{ jaspar_app_dir }}/download/database/{{ item.path | basename | regex_replace('sqlite3$', 'sql') }}"
#  loop: '{{ jaspar_sqlite.files }}'

#  ansible.builtin.unarchive:
#    src: "{{ jaspar_app_dir }}/download/database/{{ item.path | basename | regex_replace('sqlite3$', 'sql.gz') }}"
#    dest: "{{ jaspar_app_dir }}/download/database/"
#    remote_src: yes
#    extra_opts:
#      - --gunzip
#  loop: '{{ jaspar_sqlite.files }}'

- name: Get sqlite file from compressed file
  ansible.builtin.command: "gunzip -c {{ jaspar_app_dir }}/download/database/{{ item.path | basename | regex_replace('sqlite3$', 'sql.gz') }} > {{ jaspar_app_dir }}/download/database/{{ item.path | basename | regex_replace('sqlite3$', 'sqlite') }}"
  loop: '{{ jaspar_sqlite.files }}'

#- name: Remove the dump file
#  ansible.builtin.file:
#      path: "{{ item.path }}"
#      state: absent
#  loop: '{{ jaspar_sqlite.files }}'


